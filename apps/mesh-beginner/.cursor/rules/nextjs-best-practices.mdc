---
alwaysApply: true
description: Next.js and Mnemos project best-practice guidelines for maintainability, readability, performance, security, and reliability
---

# Next.js Best Practices Guide

## Maintainability

- Adopt a clear, modular project structure (e.g. `pages`, `components`, `hooks`, `lib`, `utils`, `styles`).
- Use **TypeScript** everywhere and enable `strict` mode in `tsconfig.json`.
- Keep components small and pure; prefer composition over inheritance.
- Enforce linting (`eslint`) and formatting (`prettier`) with CI integration and pre-commit hooks.
- Co-locate tests with the units they cover and maintain high test coverage via Jest + React Testing Library.
- Document complex logic with JSDoc/TSDoc and keep architectural decisions in ADRs.

## Readability

- Use descriptive names for variables, functions, and componentsâ€”avoid abbreviations.
- Limit component file length (~200 LOC max) and split large JSX into sub-components.
- Prefer explicitness: extract magic numbers/strings to named constants and enums.
- Maintain consistent code style via Prettier; never commit auto-generated code without formatting.
- Default to functional components & hooks; avoid class components unless required.

## Performance

- Leverage **`next/image`** for automatic image optimization.
- Use `next/dynamic` for lazy loading and client-side code-splitting.
- Prefer **Static Generation** (`getStaticProps`) and **ISR** over `getServerSideProps` when possible.
- Memoize expensive operations with `useMemo`, `useCallback`, `React.memo`.
- Monitor bundle size via `next build` output or `@next/bundle-analyzer` and set size-budgets.
- Configure proper caching headers (CDN, SWR revalidation) in `next.config.js` or middleware.

## Security

- Sanitize and validate all user input on both client and server (e.g. `zod`, `validator`).
- Avoid `dangerouslySetInnerHTML`; if unavoidable, sanitize with DOMPurify.
- Never expose secrets to the client; use ENV vars and `NEXT_PUBLIC_` prefix only for safe values.
- Enable CSRF protection in API routes (e.g. `next-csrf`), and ensure JWT/Session cookies are `HttpOnly`, `Secure`, `SameSite=Lax`.
- Set HTTP security headers (CSP, X-Frame-Options, Strict-Transport-Security) via Next.js middleware or custom server.
- Keep dependencies patched (`npm audit`, Dependabot, Renovate) and review new packages.

## Reliability

- Use error boundaries at `_app.tsx` level for graceful UI degradation.
- Add fallback and loading states for dynamic imports and data-fetching hooks.
- Wrap API calls in try/catch; return descriptive HTTP status codes + messages.
- Implement structured logging and integrate with monitoring (Sentry, Datadog).
- Automate tests, linting, and type-checking in CI/CD pipelines; block merges on failures.
- Employ feature flags and gradual rollouts for risky changes.

## Tooling & Workflow

- Use **Husky + lint-staged** for fast local pre-commit checks.
- Provide a `.env.example` documenting required environment variables.
- Automate dependency updates with Renovate or Dependabot.
- Add end-to-end tests (Playwright/Cypress) for critical flows.
  Refer to [mnemos-plan.mdc](mdc:mnemos-plan.mdc) for the Mnemos project roadmap.
